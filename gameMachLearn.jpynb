import random
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
import numpy as np

class RockPaperScissors:
    def __init__(self):
        self.player_choices = []
        self.computer_choices = []
        self.results = []
        self.model = DecisionTreeClassifier()
        self.encoder = LabelEncoder()
        self.encoder.fit(["rock", "paper", "scissors"])
        self.is_trained = False
        self.player_score = 0
        self.computer_score = 0
        self.tie_score = 0

    def predict_player_move(self):
        if len(self.player_choices) < 5 or not self.is_trained:
            # If insufficient data, random choice
            return random.choice(["rock", "paper", "scissors"])
        
        # Prepare data for prediction
        last_moves = np.array(self.encoder.transform(self.player_choices[-5:])).reshape(1, -1)
        prediction = self.model.predict(last_moves)[0]
        return self.encoder.inverse_transform([prediction])[0]

    def train_model(self):
        if len(self.player_choices) < 6:
            return  # Not enough data for training
        
        X = []
        y = []
        for i in range(len(self.player_choices) - 5):
            # Take last 5 moves as features
            features = self.encoder.transform(self.player_choices[i:i+5])
            target = self.encoder.transform([self.player_choices[i+5]])[0]
            X.append(features)
            y.append(target)
        
        # Convert to numpy arrays and ensure 2D structure
        X = np.array(X)
        y = np.array(y)
        
        if X.ndim == 1:
            X = X.reshape(-1, 1)
        self.model.fit(X, y)
        self.is_trained = True

    def determine_winner(self, player_choice, computer_choice):
        if player_choice == computer_choice:
            self.tie_score += 1
            return "It's a tie!"
        if (player_choice == "rock" and computer_choice == "scissors") or \
           (player_choice == "paper" and computer_choice == "rock") or \
           (player_choice == "scissors" and computer_choice == "paper"):
            self.player_score += 1
            return "You win!"
        self.computer_score += 1
        return "Computer wins!"

    def display_scores(self):
        print("\nCurrent Scores:")
        print(f"Player: {self.player_score}")
        print(f"Computer: {self.computer_score}")
        print(f"Ties: {self.tie_score}")

    def play_game(self):
        print("Welcome to Rock, Paper, Scissors with Machine Learning!")
        print("The game learns from your moves to predict your choices.")
        
        while True:
            print("\nEnter your choice (Rock, Paper, or Scissors) or type 'quit' to exit:")
            player_choice = input().strip().lower()

            if player_choice == "quit":
                print("Thanks for playing!")
                self.display_scores()
                break

            if player_choice not in ["rock", "paper", "scissors"]:
                print("Invalid input. Please choose Rock, Paper, or Scissors.")
                continue
            
            computer_choice = self.predict_player_move()
            print(f"The computer chose: {computer_choice}")

            result = self.determine_winner(player_choice, computer_choice)
            print(result)

            # Update game data
            self.player_choices.append(player_choice)
            self.computer_choices.append(computer_choice)
            self.results.append(result)

            # Retrain model
            self.train_model()

            # Display updated scores
            self.display_scores()

if __name__ == "__main__":
    game = RockPaperScissors()
    game.play_game()
